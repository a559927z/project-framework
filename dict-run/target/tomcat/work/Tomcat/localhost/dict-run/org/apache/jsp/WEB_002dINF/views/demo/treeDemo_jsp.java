/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2017-07-18 11:47:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.demo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class treeDemo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/views/include/taglibs.jsp", Long.valueOf(1500348428253L));
    _jspx_dependants.put("/WEB-INF/views/include/top.jsp", Long.valueOf(1500348428254L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    String path = request.getContextPath();
    String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path;

// Object version=request.getAttribute("version");
    Object versionObj = request.getAttribute("versionMap");
    if (versionObj == null) {
        versionObj = new Object();
    }
    String versionJson = "{}";
    if (request.getAttribute("versionJson") != null) {
        versionJson = request.getAttribute("versionJson").toString();
    }


      //  c:set
      org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/include/taglibs.jsp(20,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("ctx");
      // /WEB-INF/views/include/taglibs.jsp(20,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(basePath);
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
        return;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      //  c:set
      org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f1 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
      _jspx_th_c_005fset_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f1.setParent(null);
      // /WEB-INF/views/include/taglibs.jsp(21,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setVar("jsRoot");
      // /WEB-INF/views/include/taglibs.jsp(21,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setValue(basePath + "/assets/js/" );
      int _jspx_eval_c_005fset_005f1 = _jspx_th_c_005fset_005f1.doStartTag();
      if (_jspx_th_c_005fset_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
        return;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
      //  c:set
      org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f2 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
      _jspx_th_c_005fset_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f2.setParent(null);
      // /WEB-INF/views/include/taglibs.jsp(22,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f2.setVar("mjsRoot");
      // /WEB-INF/views/include/taglibs.jsp(22,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f2.setValue(basePath + "/assets/mobile/js/" );
      int _jspx_eval_c_005fset_005f2 = _jspx_th_c_005fset_005f2.doStartTag();
      if (_jspx_th_c_005fset_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f2);
        return;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f2);
      //  c:set
      org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f3 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
      _jspx_th_c_005fset_005f3.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f3.setParent(null);
      // /WEB-INF/views/include/taglibs.jsp(23,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f3.setVar("v");
      // /WEB-INF/views/include/taglibs.jsp(23,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f3.setValue(versionObj);
      int _jspx_eval_c_005fset_005f3 = _jspx_th_c_005fset_005f3.doStartTag();
      if (_jspx_th_c_005fset_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f3);
        return;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f3);
      out.write("<script>\r\n");
      out.write("    var version =");
      out.print(versionJson);
      out.write(";\r\n");
      out.write("</script>");
      out.write("<!DOCTYPE HTML> \r\n");
      out.write("<html> \r\n");
      out.write("<head>\r\n");
      out.write("\t<title>树组件</title>\r\n");
      out.write("\t");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta name=\"description\" content=\"overview & stats\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\r\n");
      out.write("<link rel=\"icon\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/favicon.ico\" type=\"image/x-icon\">\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/favicon.ico\" type=\"image/x-icon\">\r\n");
      out.write("<!-- basic styles -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/bootstrap.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/font-awesome/font-awesome.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/jgGrid/ui.jqgrid-bootstrap.css\">\r\n");
      out.write("<!-- messenger styles -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/messenger/messenger.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/messenger/messenger-theme-future.css\">\r\n");
      out.write("<!--jqueryMCustomScrollBar-->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/jquery-mCustomScrollbar/jquery.mCustomScrollbar.min.css\">\r\n");
      out.write("<!-- zrw styles -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/zrw.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/global.css\">\r\n");
      out.write("<script>\r\n");
      out.write("    //basePath 定义在taglibs.jsp中\r\n");
      out.write("    G_WEB_ROOT = \"");
      out.print(basePath);
      out.write("\";\r\n");
      out.write("    var iframe = window.parent.document.getElementById(\"mainFrame\");\r\n");
      out.write("    var gotoBack = function () {\r\n");
      out.write("//     \talert();\r\n");
      out.write("    };\r\n");
      out.write("    if (iframe) {\r\n");
      out.write("        window.onclick = function () {\r\n");
      out.write("            window.parent.closeMessage();\r\n");
      out.write("        };\r\n");
      out.write("        gotoBack = window.parent.gotoRecordPage;\r\n");
      out.write("    } else if (typeof(\"gotoRecordPage\") == \"function\") {\r\n");
      out.write("        gotoBack = gotoRecordPage;\r\n");
      out.write("    }\r\n");
      out.write("    addEventHandler(window, 'keydown', function (event) {\r\n");
      out.write("        if (event.keyCode == 8) {\r\n");
      out.write("            var elem = event.srcElement;\r\n");
      out.write("            var name = elem.nodeName;\r\n");
      out.write("//             console.log(name);\r\n");
      out.write("//             if(name!='INPUT' && name!='TEXTAREA'){  \r\n");
      out.write("//                 event.returnValue = false ;  \r\n");
      out.write("//                 gotoBack();\r\n");
      out.write("//                 return ;  \r\n");
      out.write("//             }  \r\n");
      out.write("//             var type_e = elem.type.toUpperCase();  \r\n");
      out.write("            if (name != 'INPUT' && name != 'TEXT' && name != 'NUMBER' && name != 'TEXTAREA' && name != 'PASSWORD' && name != 'FILE') {\r\n");
      out.write("                event.returnValue = false;\r\n");
      out.write("                gotoBack();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("            if (name == 'INPUT' && (elem.readOnly == true || elem.disabled == true)) {\r\n");
      out.write("                event.returnValue = false;\r\n");
      out.write("                gotoBack();\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function addEventHandler(obj, eventName, fun, param) {\r\n");
      out.write("        var fn = fun;\r\n");
      out.write("        if (param) {\r\n");
      out.write("            fn = function (e) {\r\n");
      out.write("                fun.call(this, param);  //继承监听函数,并传入参数以初始化;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        if (obj.attachEvent) {\r\n");
      out.write("            obj.attachEvent('on' + eventName, fn);\r\n");
      out.write("        } else if (obj.addEventListener) {\r\n");
      out.write("            obj.addEventListener(eventName, fn, false);\r\n");
      out.write("        } else {\r\n");
      out.write("            obj[\"on\" + eventName] = fn;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var dataZoom = {\r\n");
      out.write("        show: true,\r\n");
      out.write("        realtime: true,\r\n");
      out.write("        y: 1,\r\n");
      out.write("        height: 20,\r\n");
      out.write("//        backgroundColor: 'rgba(255,255,255,0.5)',\r\n");
      out.write("//        dataBackgroundColor: 'rgba(255,255,240,0.5)',\r\n");
      out.write("//        fillerColor: 'rgba(211 ,211 ,211 ,0.6)',\r\n");
      out.write("//        handleColor: 'rgba(100,100,100,0.8)',\r\n");
      out.write("        zoomLock: true,   //当设置为true时选择区域不能伸缩\r\n");
      out.write("        showDetail: false,\r\n");
      out.write("        handleSize: 40,\r\n");
      out.write("        start: 0,\r\n");
      out.write("        end: 40\r\n");
      out.write("    };\r\n");
      out.write("</script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${jsRoot}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("require.js\"></script>\r\n");
      out.write("\t\t");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/global.css\" rel=\"stylesheet\" />\r\n");
      out.write("\t<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/assets/css/ztree/metroStyle/metroStyle.css\" rel=\"stylesheet\" />\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\t.content{\r\n");
      out.write("\t\t\twidth:500px;\r\n");
      out.write("\t\t\tmargin:50px auto;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"main-container\">\r\n");
      out.write("\t<div class=\"content\">\r\n");
      out.write("\t\t<div id=\"tree\" class=\"u-tree\"></div>\r\n");
      out.write("\t\t<ul id=\"ztree\" class=\"ztree\" style=\"width:560px; overflow:auto;\"></ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("require(['zrw-elements','ztree'],function(){\r\n");
      out.write("\t\r\n");
      out.write("\tvar DataSourceTree = function(options) {\r\n");
      out.write("\t\tthis._data \t= options.data;\r\n");
      out.write("\t\tthis._delay = options.delay;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tDataSourceTree.prototype.data = function(options, callback) {\r\n");
      out.write("\t\tvar self = this;\r\n");
      out.write("\t\tvar $data = null;\r\n");
      out.write("\r\n");
      out.write("\t\tif(!(\"name\" in options) && !(\"type\" in options)){\r\n");
      out.write("\t\t\t$data = this._data;//the root tree\r\n");
      out.write("\t\t\tcallback({ data: $data });\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse if(\"type\" in options && options.type == \"folder\") {\r\n");
      out.write("\t\t\tif(\"additionalParameters\" in options && \"children\" in options.additionalParameters)\r\n");
      out.write("\t\t\t\t$data = options.additionalParameters.children;\r\n");
      out.write("\t\t\telse $data = {}//no data\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif($data != null)//this setTimeout is only for mimicking some random delay\r\n");
      out.write("\t\t\tsetTimeout(function(){callback({ data: $data });} , parseInt(Math.random() * 500) + 200);\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\tvar tree_data = {\r\n");
      out.write("\t\t'for-sale' : {name: 'For Sale', type: 'folder'}\t,\r\n");
      out.write("\t\t'vehicles' : {name: 'Vehicles', type: 'folder'}\t,\r\n");
      out.write("\t\t'rentals' : {name: 'Rentals', type: 'item'}\t,\r\n");
      out.write("\t\t'real-estate' : {name: 'Real Estate', type: 'item'}\t,\r\n");
      out.write("\t\t'pets' : {name: 'Pets', type: 'item'}\t,\r\n");
      out.write("\t\t'tickets' : {name: 'Tickets', type: 'item'}\t,\r\n");
      out.write("\t\t'services' : {name: 'Services', type: 'item'}\t,\r\n");
      out.write("\t\t'personals' : {name: 'Personals', type: 'item'}\r\n");
      out.write("\t}\r\n");
      out.write("\ttree_data['for-sale']['additionalParameters'] = {\r\n");
      out.write("\t\t'children' : {\r\n");
      out.write("\t\t\t'appliances' : {name: 'Appliances', type: 'item'},\r\n");
      out.write("\t\t\t'arts-crafts' : {name: 'Arts & Crafts', type: 'item'},\r\n");
      out.write("\t\t\t'clothing' : {name: 'Clothing', type: 'item'},\r\n");
      out.write("\t\t\t'computers' : {name: 'Computers', type: 'item'},\r\n");
      out.write("\t\t\t'jewelry' : {name: 'Jewelry', type: 'item'},\r\n");
      out.write("\t\t\t'office-business' : {name: 'Office & Business', type: 'item'},\r\n");
      out.write("\t\t\t'sports-fitness' : {name: 'Sports & Fitness', type: 'item'}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\ttree_data['vehicles']['additionalParameters'] = {\r\n");
      out.write("\t\t'children' : {\r\n");
      out.write("\t\t\t'cars' : {name: 'Cars', type: 'item'},\r\n");
      out.write("\t\t\t'motorcycles' : {name: 'Motorcycles', type: 'item'},\r\n");
      out.write("\t\t\t'boats' : {name: 'Boats', type: 'item'}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tvar treeDataSource = new DataSourceTree({data: tree_data});\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t$('#tree').zrw_tree({\r\n");
      out.write("\t\tdataSource: treeDataSource ,\r\n");
      out.write("\t\tmultiSelect:true,\r\n");
      out.write("\t\tselectCallBack:function(f){\r\n");
      out.write("\t\t\tconsole.info(f);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tloadingHTML:'<div class=\"tree-loading\"><i class=\"icon-refresh icon-spin blue\"></i></div>',\r\n");
      out.write("\t\t'open-icon' : 'icon-minus',\r\n");
      out.write("\t\t'close-icon' : 'icon-plus',\r\n");
      out.write("\t\t'selectable' : true,\r\n");
      out.write("\t\t'selected-icon' : 'icon-ok',\r\n");
      out.write("\t\t'unselected-icon' : 'icon-remove'\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t/***************ztree***************/\r\n");
      out.write("\tvar setting = {\r\n");
      out.write("\t        check: {\r\n");
      out.write("\t            enable: true\r\n");
      out.write("\t        },\r\n");
      out.write("\t        view: {\r\n");
      out.write("\t            addHoverDom: addHoverDom,\r\n");
      out.write("\t            removeHoverDom: removeHoverDom,\r\n");
      out.write("\t            dblClickExpand: false,\r\n");
      out.write("\t            showLine: true,\r\n");
      out.write("\t            selectedMulti: false\r\n");
      out.write("\t        },\r\n");
      out.write("\t        data: {\r\n");
      out.write("\t            simpleData: {\r\n");
      out.write("\t                enable:true,\r\n");
      out.write("\t                idKey: \"id\",\r\n");
      out.write("\t                pIdKey: \"pId\",\r\n");
      out.write("\t                rootPId: \"\"\r\n");
      out.write("\t            }\r\n");
      out.write("\t        },\r\n");
      out.write("\t        callback: {\r\n");
      out.write("\t            beforeClick: function(treeId, treeNode) {\r\n");
      out.write("\t                var zTree = $.fn.zTree.getZTreeObj(\"ztree\");\r\n");
      out.write("\t                if (treeNode.isParent) {\r\n");
      out.write("\t                    zTree.expandNode(treeNode);\r\n");
      out.write("\t                    return false;\r\n");
      out.write("\t                } else {\r\n");
      out.write("\t                    demoIframe.attr(\"src\",treeNode.file + \".html\");\r\n");
      out.write("\t                    return true;\r\n");
      out.write("\t                }\r\n");
      out.write("\t            }\r\n");
      out.write("\t        }\r\n");
      out.write("\t   };\r\n");
      out.write("\t\t\r\n");
      out.write("\tvar zNodes =[\r\n");
      out.write("\t             {id:1, pId:0, name:\"[core] 基本功能 演示\", open:true},\r\n");
      out.write("\t             {id:101, pId:1, name:\"最简单的树 --  标准 JSON 数据\", file:\"core/standardData\"},\r\n");
      out.write("\t             {id:102, pId:1, name:\"最简单的树 --  简单 JSON 数据\", file:\"core/simpleData\"},\r\n");
      out.write("\t             {id:103, pId:1, name:\"不显示 连接线\", file:\"core/noline\"},\r\n");
      out.write("\t             {id:104, pId:1, name:\"不显示 节点 图标\", file:\"core/noicon\"},\r\n");
      out.write("\t             {id:105, pId:1, name:\"自定义图标 --  icon 属性\", file:\"core/custom_icon\"},\r\n");
      out.write("\t             {id:106, pId:1, name:\"自定义图标 --  iconSkin 属性\", file:\"core/custom_iconSkin\"},\r\n");
      out.write("\t             {id:107, pId:1, name:\"自定义字体\", file:\"core/custom_font\"},\r\n");
      out.write("\t             {id:115, pId:1, name:\"超链接演示\", file:\"core/url\"},\r\n");
      out.write("\t             {id:108, pId:1, name:\"异步加载 节点数据\", file:\"core/async\"},\r\n");
      out.write("\t             {id:109, pId:1, name:\"用 zTree 方法 异步加载 节点数据\", file:\"core/async_fun\"},\r\n");
      out.write("\t             {id:110, pId:1, name:\"用 zTree 方法 更新 节点数据\", file:\"core/update_fun\"},\r\n");
      out.write("\t             {id:111, pId:1, name:\"单击 节点 控制\", file:\"core/click\"},\r\n");
      out.write("\t             {id:112, pId:1, name:\"展开 / 折叠 父节点 控制\", file:\"core/expand\"},\r\n");
      out.write("\t             {id:113, pId:1, name:\"根据 参数 查找 节点\", file:\"core/searchNodes\"},\r\n");
      out.write("\t             {id:114, pId:1, name:\"其他 鼠标 事件监听\", file:\"core/otherMouse\"},\r\n");
      out.write("\r\n");
      out.write("\t             {id:2, pId:0, name:\"[excheck] 复/单选框功能 演示\", open:false},\r\n");
      out.write("\t             {id:201, pId:2, name:\"Checkbox 勾选操作\", file:\"excheck/checkbox\"},\r\n");
      out.write("\t             {id:206, pId:2, name:\"Checkbox nocheck 演示\", file:\"excheck/checkbox_nocheck\"},\r\n");
      out.write("\t             {id:207, pId:2, name:\"Checkbox chkDisabled 演示\", file:\"excheck/checkbox_chkDisabled\"},\r\n");
      out.write("\t             {id:208, pId:2, name:\"Checkbox halfCheck 演示\", file:\"excheck/checkbox_halfCheck\"},\r\n");
      out.write("\t             {id:202, pId:2, name:\"Checkbox 勾选统计\", file:\"excheck/checkbox_count\"},\r\n");
      out.write("\t             {id:203, pId:2, name:\"用 zTree 方法 勾选 Checkbox\", file:\"excheck/checkbox_fun\"},\r\n");
      out.write("\t             {id:204, pId:2, name:\"Radio 勾选操作\", file:\"excheck/radio\"},\r\n");
      out.write("\t             {id:209, pId:2, name:\"Radio nocheck 演示\", file:\"excheck/radio_nocheck\"},\r\n");
      out.write("\t             {id:210, pId:2, name:\"Radio chkDisabled 演示\", file:\"excheck/radio_chkDisabled\"},\r\n");
      out.write("\t             {id:211, pId:2, name:\"Radio halfCheck 演示\", file:\"excheck/radio_halfCheck\"},\r\n");
      out.write("\t             {id:205, pId:2, name:\"用 zTree 方法 勾选 Radio\", file:\"excheck/radio_fun\"},\r\n");
      out.write("\r\n");
      out.write("\t             {id:3, pId:0, name:\"[exedit] 编辑功能 演示\", open:false},\r\n");
      out.write("\t             {id:301, pId:3, name:\"拖拽 节点 基本控制\", file:\"exedit/drag\"},\r\n");
      out.write("\t             {id:302, pId:3, name:\"拖拽 节点 高级控制\", file:\"exedit/drag_super\"},\r\n");
      out.write("\t             {id:303, pId:3, name:\"用 zTree 方法 移动 / 复制 节点\", file:\"exedit/drag_fun\"},\r\n");
      out.write("\t             {id:304, pId:3, name:\"基本 增 / 删 / 改 节点\", file:\"exedit/edit\"},\r\n");
      out.write("\t             {id:305, pId:3, name:\"高级 增 / 删 / 改 节点\", file:\"exedit/edit_super\"},\r\n");
      out.write("\t             {id:306, pId:3, name:\"用 zTree 方法 增 / 删 / 改 节点\", file:\"exedit/edit_fun\"},\r\n");
      out.write("\t             {id:307, pId:3, name:\"异步加载 & 编辑功能 共存\", file:\"exedit/async_edit\"},\r\n");
      out.write("\t             {id:308, pId:3, name:\"多棵树之间 的 数据交互\", file:\"exedit/multiTree\"},\r\n");
      out.write("\r\n");
      out.write("\t             {id:4, pId:0, name:\"大数据量 演示\", open:false},\r\n");
      out.write("\t             {id:401, pId:4, name:\"一次性加载大数据量\", file:\"bigdata/common\"},\r\n");
      out.write("\t             {id:402, pId:4, name:\"分批异步加载大数据量\", file:\"bigdata/diy_async\"},\r\n");
      out.write("\t             {id:403, pId:4, name:\"分批异步加载大数据量\", file:\"bigdata/page\"},\r\n");
      out.write("\r\n");
      out.write("\t             {id:5, pId:0, name:\"组合功能 演示\", open:false},\r\n");
      out.write("\t             {id:501, pId:5, name:\"冻结根节点\", file:\"super/oneroot\"},\r\n");
      out.write("\t             {id:502, pId:5, name:\"单击展开/折叠节点\", file:\"super/oneclick\"},\r\n");
      out.write("\t             {id:503, pId:5, name:\"保持展开单一路径\", file:\"super/singlepath\"},\r\n");
      out.write("\t             {id:504, pId:5, name:\"添加 自定义控件\", file:\"super/diydom\"},\r\n");
      out.write("\t             {id:505, pId:5, name:\"checkbox / radio 共存\", file:\"super/checkbox_radio\"},\r\n");
      out.write("\t             {id:506, pId:5, name:\"左侧菜单\", file:\"super/left_menu\"},\r\n");
      out.write("\t             {id:513, pId:5, name:\"OutLook 样式的左侧菜单\", file:\"super/left_menuForOutLook\"},\r\n");
      out.write("\t             {id:507, pId:5, name:\"下拉菜单\", file:\"super/select_menu\"},\r\n");
      out.write("\t             {id:509, pId:5, name:\"带 checkbox 的多选下拉菜单\", file:\"super/select_menu_checkbox\"},\r\n");
      out.write("\t             {id:510, pId:5, name:\"带 radio 的单选下拉菜单\", file:\"super/select_menu_radio\"},\r\n");
      out.write("\t             {id:508, pId:5, name:\"右键菜单 的 实现\", file:\"super/rightClickMenu\"},\r\n");
      out.write("\t             {id:511, pId:5, name:\"与其他 DOM 拖拽互动\", file:\"super/dragWithOther\"},\r\n");
      out.write("\t             {id:512, pId:5, name:\"异步加载模式下全部展开\", file:\"super/asyncForAll\"},\r\n");
      out.write("\r\n");
      out.write("\t             {id:6, pId:0, name:\"其他扩展功能 演示\", open:false},\r\n");
      out.write("\t             {id:601, pId:6, name:\"隐藏普通节点\", file:\"exhide/common\"},\r\n");
      out.write("\t             {id:602, pId:6, name:\"配合 checkbox 的隐藏\", file:\"exhide/checkbox\"},\r\n");
      out.write("\t             {id:603, pId:6, name:\"配合 radio 的隐藏\", file:\"exhide/radio\"}\r\n");
      out.write("\t         ];\r\n");
      out.write("\r\n");
      out.write("\t         $(document).ready(function(){\r\n");
      out.write("\t             var t = $(\"#ztree\");\r\n");
      out.write("\t             t = $.fn.zTree.init(t, setting, zNodes);\r\n");
      out.write("\t             demoIframe = $(\"#testIframe\");\r\n");
      out.write("\t             demoIframe.bind(\"load\", loadReady);\r\n");
      out.write("\t             var zTree = $.fn.zTree.getZTreeObj(\"ztree\");\r\n");
      out.write("\t             zTree.selectNode(zTree.getNodeByParam(\"id\", 101));\r\n");
      out.write("\r\n");
      out.write("\t         });\r\n");
      out.write("\r\n");
      out.write("\t         function loadReady() {\r\n");
      out.write("\t             var bodyH = demoIframe.contents().find(\"body\").get(0).scrollHeight,\r\n");
      out.write("\t                     htmlH = demoIframe.contents().find(\"html\").get(0).scrollHeight,\r\n");
      out.write("\t                     maxH = Math.max(bodyH, htmlH), minH = Math.min(bodyH, htmlH),\r\n");
      out.write("\t                     h = demoIframe.height() >= maxH ? minH:maxH ;\r\n");
      out.write("\t             if (h < 530) h = 530;\r\n");
      out.write("\t             demoIframe.height(h);\r\n");
      out.write("\t         }\r\n");
      out.write("\t         \r\n");
      out.write("\t         var zTree;\r\n");
      out.write("\t         var demoIframe;\r\n");
      out.write("\r\n");
      out.write("\t         function addHoverDom(treeId, treeNode) {\r\n");
      out.write("\t             var sObj = $(\"#\" + treeNode.tId + \"_span\");\r\n");
      out.write("\t             if (treeNode.editNameFlag || $(\"#addBtn_\"+treeNode.tId).length>0) return;\r\n");
      out.write("\t             var addStr = \"<span class='button remove' id='removeBtn_\" + treeNode.tId\r\n");
      out.write("\t                     + \"' title='add node' onfocus='this.blur();'></span>\";\r\n");
      out.write("\r\n");
      out.write("\t             addStr += \"<span class='button add' id='addBtn_\" + treeNode.tId + \"'></span>\";\r\n");
      out.write("\t             addStr += \"<span class='button edit' id='editBtn_\" + treeNode.tId + \"'></span>\";\r\n");
      out.write("\t             sObj.after(addStr);\r\n");
      out.write("\t             var btn = $(\"#addBtn_\"+treeNode.tId);\r\n");
      out.write("\t             if (btn) btn.bind(\"click\", function(){\r\n");
      out.write("\t                 var zTree = $.fn.zTree.getZTreeObj(\"treeDemo\");\r\n");
      out.write("\t                 zTree.addNodes(treeNode, {id:(1000 + newCount), pId:treeNode.id, name:\"new node\" + (newCount++)});\r\n");
      out.write("\t                 return false;\r\n");
      out.write("\t             });\r\n");
      out.write("\t         };\r\n");
      out.write("\r\n");
      out.write("\t         function removeHoverDom(treeId, treeNode) {\r\n");
      out.write("\t             $(\"#addBtn_\"+treeNode.tId).unbind().remove();\r\n");
      out.write("\t             $(\"#removeBtn_\"+treeNode.tId).unbind().remove();\r\n");
      out.write("\t             $(\"#editBtn_\"+treeNode.tId).unbind().remove();\r\n");
      out.write("\t         };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
