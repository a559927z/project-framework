<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.chinahrd.db.input.dao.DbImportDao">

	<resultMap id="rsMap" type="net.chinahrd.db.input.Entity.SoureVDimEmpEntity">
		<result property="c_id" column="c_id" />
		<result property="v_dim_emp_id" column="v_dim_emp_id" />
		<result property="id" column="id" />
		<result property="customer_id" column="customer_id" />
		<result property="emp_id" column="emp_id" />
		<result property="emp_key" column="emp_key" />
		<result property="user_name" column="user_name" />
		<result property="user_name_ch" column="user_name_ch" />
		<result property="emp_hf_id" column="emp_hf_id" />
		<result property="emp_hf_key" column="emp_hf_key" />
		<result property="email" column="email" />
		<result property="img_path" column="img_path" />
		
		<result property="passtime_or_fulltime" column="passtime_or_fulltime" />
		<result property="contract" column="contract" />
		<result property="blood" column="blood" />
		<result property="company_age" column="company_age" />
		
		<result property="is_key_talent" column="is_key_talent" />
		<result property="sex" column="sex" />
		<result property="nation" column="nation" />
		<result property="degree_id" column="degree_id" />
		<result property="degree" column="degree" />
		<result property="native_place" column="native_place" />
		<result property="country" column="country" />
		<result property="birth_place" column="birth_place" />
		<result property="birth_date" column="birth_date" />
		<result property="national_id" column="national_id" />
		<result property="national_type" column="national_type" />
		
		<result property="marry_status" column="marry_status" />
		<result property="patty_name" column="patty_name" />
		
		<result property="position_id" column="position_id" />
		<result property="position_name" column="position_name" />
		<result property="organization_parent_id" column="organization_parent_id" />
		<result property="organization_parent_name" column="organization_parent_name" />
		<result property="organization_id" column="organization_id" />
		<result property="organization_name" column="organization_name" />
		
		<result property="sequence_id" column="sequence_id" />
		<result property="sequence_name" column="sequence_name" />
		<result property="sequence_sub_id" column="sequence_sub_id" />
		<result property="sequence_sub_name" column="sequence_sub_name" />
		<result property="performance_id" column="performance_id" />
		<result property="performance_name" column="performance_name" />
		<result property="key_talent_type_key" column="key_talent_type_key" />
<!-- 		<result property="key_talent_type_id" column="key_talent_type_id" /> -->
<!-- 		<result property="key_talent_type_name" column="key_talent_type_name" /> -->

		<result property="ability_id" column="ability_id" />
		<result property="job_title_id" column="job_title_id" />
		<result property="ability_lv_id" column="ability_lv_id" />
		<result property="ability_name" column="ability_name" />
		<result property="job_title_name" column="job_title_name" />
		<result property="ability_lv_name" column="ability_lv_name" />
		<result property="rank_name" column="rank_name" />
		
		<result property="population_id" column="population_id" />
		<result property="population_name" column="population_name" />
		<result property="area_id" column="area_id" />
		
		<result property="run_off_date" column="run_off_date" />
		<result property="entry_date" column="entry_date" />

		<result property="tel_phone" column="tel_phone" />
		<result property="qq" column="qq" />
		<result property="wx_code" column="wx_code" />
		<result property="address" column="address" />
		<result property="contract_unit" column="contract_unit" />
		<result property="work_place_id" column="work_place_id" />
		<result property="work_place" column="work_place" />
		<result property="regular_date" column="regular_date" />
		<result property="channel_id" column="channel_id" />
		<result property="speciality" column="speciality" />
		<result property="is_regular" column="is_regular" />
		<result property="apply_type" column="apply_type" />
		
		<result property="organization_key" column="organization_key" />
		<result property="full_path" column="full_path" />
	</resultMap>

	<resultMap id="rsHECMap"
		type="net.chinahrd.db.input.Entity.HistoryEmpCountEntity">
		<result property="history_emp_count_id" column="history_emp_count_id" />
		<result property="customer_id" column="customer_id" />
		<result property="organization_id" column="organization_id" />
		<result property="organization_full_path" column="organization_full_path" />
		<result property="organization_key" column="organization_key" />
		<result property="month_begin" column="month_begin" />
		<result property="month_begin_sum" column="month_begin_sum" />
		<result property="month_end" column="month_end" />
		<result property="month_end_sum" column="month_end_sum" />
		<result property="month_count" column="month_count" />
		<result property="month_count_sum" column="month_count_sum" />
		<result property="month_avg" column="month_avg" />
		<result property="month_avg_sum" column="month_avg_sum" />
		<result property="un_act_count_sum" column="un_act_count_sum" />
		<result property="year_month" column="year_month" />
		<result property="refresh" column="refresh" />
		<result property="refreshStr" column="refreshStr" />
	</resultMap>
	
	<resultMap id="rsJcMap"
		type="net.chinahrd.db.input.Entity.SoureJobChangeEntity">
		<result property="emp_job_change_id" column="emp_job_change_id" />
		<result property="customer_id" column="customer_id" />
		<result property="emp_id" column="emp_id" />
		<result property="emp_key" column="emp_key" />
		<result property="change_date" column="change_date" />
		<result property="change_type" column="change_type" />
		<result property="organization_id" column="organization_id" />
		<result property="organization_name" column="organization_name" />
		<result property="position_id" column="position_id" />
		<result property="position_name" column="position_name" />
		<result property="sequence_id" column="sequence_id" />
		<result property="sequence_name" column="sequence_name" />
		<result property="sequence_sub_id" column="sequence_sub_id" />
		<result property="sequence_sub_name" column="sequence_sub_name" />
		<result property="ability_id" column="ability_id" />
		<result property="ability_name" column="ability_name" />
		<result property="job_title_id" column="job_title_id" />
		<result property="job_title_name" column="job_title_name" />
		<result property="ability_lv_id" column="ability_lv_id" />
		<result property="ability_lv_name" column="ability_lv_name" />
		<result property="rank_name" column="rank_name" />
		<result property="rank_name_ed" column="rank_name_ed" />
		<result property="position_id_ed" column="position_id_ed" />
		<result property="position_name_ed" column="position_name_ed" />
		<result property="refresh" column="refresh" />
	</resultMap>

	<!-- 工作异动 -->
	<insert id="callJobChange" statementType="CALLABLE">
		CALL pro_fetch_job_change (
			#{p_customer_id, mode=IN, jdbcType=VARCHAR},
			#{p_user_id, mode=IN, jdbcType=VARCHAR}
			)
	</insert>
	<select id="queryJobChange" resultMap="rsJcMap">
		SELECT
			emp_job_change_id, emp_id, emp_key, change_date, position_id, position_name, rank_name
		FROM
			job_change t
		WHERE customer_id= #{customer_id}
			AND t.rank_name_ed is null
		ORDER BY
			emp_id, change_date DESC
	</select>
	<update id="replaceJobChange">
	UPDATE job_change
	SET position_id_ed = #{position_id_ed},
		position_name_ed = #{position_name_ed},
		rank_name_ed =#{rank_name_ed},
		refresh = now()
	WHERE emp_job_change_id = #{emp_job_change_id} AND customer_id = #{customer_id} AND rank_name_ed is null 
	</update>
	
	
	

	<!-- 员工( entry_date >= 2010-01-01 AND run_off_date <= 2017-01-01) 每晚实施定一个范围 -->
	<!-- ============================================================================================================ -->
	<select id="querySoureVDimEmp" resultMap="rsMap">
		SELECT 
			c_id, t.customer_id, emp_id, emp_key, user_name, user_name_ch, emp_hf_id, emp_hf_key,  email, img_path, 
			passtime_or_fulltime, contract, blood, 
			is_key_talent, sex, nation, degree_id, degree, native_place, country, birth_place, birth_date, national_id, national_type,
			marry_status, patty_name, 
			position_id, position_name, organization_parent_id, organization_parent_name, organization_id, organization_name,
			t.sequence_id, t.sequence_name, t.sequence_sub_id, t.sequence_sub_name, performance_id, performance_name, key_talent_type_key,
			t.ability_id, job_title_id, t.ability_lv_id, t.ability_name, job_title_name, t.ability_lv_name,
			CONCAT(t1.curt_name,t2.curt_name,t3.curt_name, ".", t4.curt_name) rank_name, 
			run_off_date, entry_date,
			tel_phone, qq, wx_code, address, contract_unit, t5.city_id as work_place_id, work_place, regular_date, channel_id, speciality, is_regular,
			c_id
		FROM soure_v_dim_emp t
		LEFT JOIN dim_sequence t1 on t1.sequence_id = t.sequence_id and t1.customer_id = t.customer_id
		LEFT JOIN dim_sequence_sub t2 on t2.sequence_sub_id = t.sequence_sub_id and t2.customer_id = t.customer_id
		LEFT JOIN dim_ability t3 on t3.ability_id = t.ability_id and t3.customer_id = t.customer_id
		LEFT JOIN dim_ability_lv t4 on t4.ability_lv_id = t.ability_lv_id and t4.customer_id = t.customer_id
		left join dim_city t5 on t5.city_name = t.work_place and t5.customer_id = t.customer_id
		WHERE t.customer_id = #{customerId}
		AND t.entry_date &gt;= '2010-01-01' OR t.run_off_date  &lt;= '2017-01-01' -- 每晚实施定一个范围
		ORDER BY emp_hf_id
	</select>
	<select id="queryVDimEmpRFD" resultMap="rsMap">
		SELECT 
			v_dim_emp_id, report_relation
		FROM v_dim_emp
		WHERE customer_id = #{customer_id} AND
		c_id in 
			<foreach item="c_id" collection="list" open="(" separator="," close=")">
			'${c_id}'
			</foreach>
	</select>
	<select id="queryVDimEmpWorking" resultMap="rsMap">
		SELECT 
			v_dim_emp_id, t.customer_id, emp_id, emp_key, user_name, user_name_ch, emp_hf_id, emp_hf_key,  email, img_path, 
			passtime_or_fulltime, contract, blood,  company_age,
			is_key_talent, sex, nation, degree_id, degree, native_place, country, birth_place, birth_date, national_id, national_type,
			marry_status, patty_name, 
			position_id, position_name, organization_parent_id, organization_parent_name, organization_id, organization_name,
			t.sequence_id, t.sequence_name, t.sequence_sub_id, t.sequence_sub_name, performance_id, performance_name, 
			t.ability_id, job_title_id, t.ability_lv_id, t.ability_name, job_title_name, t.ability_lv_name,
			rank_name, 
			run_off_date, entry_date,
			tel_phone, qq, wx_code, address, contract_unit, work_place_id, work_place, regular_date, channel_id, speciality, is_regular,
			c_id, report_relation
		FROM v_dim_emp t
		WHERE t.run_off_date is NULL AND t.customer_id = #{customerId}
		OR t.run_off_date  &lt;= '2017-01-01' -- 每晚实施定一个范围
		ORDER BY emp_hf_id
	</select>
	<select id="queryIsTT"  resultType="net.chinahrd.entity.dto.KVItemDto">
		SELECT t.emp_id k, t.is_sychron v FROM key_talent t WHERE t.is_delete = 0 AND t.customer_id = #{customerId}
	</select>
	<delete id="deleteVdimEmp" parameterType="java.util.List">
		DELETE FROM `v_dim_emp`
		WHERE c_id in
		<foreach collection="list" item="i" index="index" open="(" close=")" separator=",">
			#{i.c_id}
		</foreach>
	</delete>
	<insert id="replaceVDimEmp" parameterType="java.util.List">
		<if test="list != null and list.size() > 0 ">
			INSERT INTO v_dim_emp (
				v_dim_emp_id, customer_id, emp_id, emp_key, user_name, user_name_ch, emp_hf_id, emp_hf_key,  email, img_path, 
				passtime_or_fulltime, contract, blood, age, company_age,
				is_key_talent, sex, nation, degree_id, degree, native_place, country, birth_place, birth_date, national_id, national_type,
				marry_status, patty_name, 
				position_id, position_name, organization_parent_id, organization_parent_name, organization_id, organization_name,
				sequence_id, sequence_name, sequence_sub_id, sequence_sub_name, performance_id, performance_name, <!-- key_talent_type_id, key_talent_type_name, -->
				ability_id, job_title_id, ability_lv_id, ability_name, job_title_name, ability_lv_name, rank_name, 
				run_off_date, entry_date,
				tel_phone, qq, wx_code, address, contract_unit, work_place_id, work_place, regular_date, channel_id, speciality, is_regular, refresh_date,
				c_id, report_relation
			)VALUES
			<foreach collection="list" item="i" index="index" open="" close="" separator=",">
				(
				#{i.id}, #{i.customer_id}, #{i.emp_id},#{i.emp_key}, #{i.user_name}, #{i.user_name_ch},#{i.emp_hf_id}, #{i.emp_hf_key}, #{i.email},#{i.img_path},
				#{i.passtime_or_fulltime}, #{i.contract},#{i.blood}, #{i.age}, #{i.company_age},
				#{i.is_key_talent}, #{i.sex}, #{i.nation}, #{i.degree_id}, #{i.degree}, #{i.native_place}, #{i.country}, #{i.birth_place}, #{i.birth_date}, #{i.national_id}, #{i.national_type},
				#{i.marry_status}, #{i.patty_name}, 
				#{i.position_id}, #{i.position_name}, #{i.organization_parent_id}, #{i.organization_parent_name}, #{i.organization_id}, #{i.organization_name},
				#{i.sequence_id}, #{i.sequence_name}, #{i.sequence_sub_id}, #{i.sequence_sub_name}, #{i.performance_id}, #{i.performance_name}, <!-- #{i.key_talent_type_id}, #{i.key_talent_type_name}, -->
				#{i.ability_id}, #{i.job_title_id}, #{i.ability_lv_id}, #{i.ability_name}, #{i.job_title_name}, #{i.ability_lv_name}, #{i.rank_name},
				#{i.run_off_date}, #{i.entry_date},
				#{i.tel_phone}, #{i.qq}, #{i.wx_code}, #{i.address}, #{i.contract_unit}, #{i.work_place_id}, #{i.work_place}, #{i.regular_date},  #{i.channel_id}, #{i.speciality}, #{i.is_regular}, now(),
				#{i.c_id},
				#{i.report_relation2}
				)
			</foreach>
		</if>
	</insert>
	<update id="updateReportRelation" parameterType="java.util.List">
	    <foreach collection="list" item="i" index="index" open="" separator=";" close="" >
		    UPDATE `v_dim_emp` SET refresh_date = now(), report_relation = #{i.report_relation2}, age= #{i.age}, company_age = #{i.company_age}
		    WHERE v_dim_emp_id = #{i.v_dim_emp_id}
	    </foreach>
	</update>
<!-- 	<update id="updateReportRelation" parameterType="list"> -->
<!-- 		update v_dim_emp` -->
<!-- 		<trim prefix="set" suffixOverrides=","> -->
<!-- 			<trim prefix="report_relation =case" suffix="end,"> -->
<!-- 				<foreach collection="list" item="i" index="index"> -->
<!-- 					<if test="i.report_relation2!=null"> -->
<!-- 						when id=#{i.v_dim_emp_id} then #{i.report_relation2} -->
<!-- 					</if> -->
<!-- 				</foreach> -->
<!-- 			</trim> -->
<!-- 		</trim> -->
<!-- 		where -->
<!-- 		<foreach collection="list" separator="or" item="i" index="index"> -->
<!-- 			id=#{i.v_dim_emp_id} -->
<!-- 		</foreach> -->
<!-- 	</update>  -->
	<insert id="callDimEmpDays" statementType="CALLABLE">
		CALL pro_fetch_dim_emp_days (#{p_customer_id, mode=IN, jdbcType=VARCHAR}, #{p_user_id, mode=IN, jdbcType=VARCHAR})
	</insert>
	<!-- ============================================================================================================ -->
	
	
	
	
	
	
	
	
	
	
	<insert id="insertLog" parameterType="net.chinahrd.db.input.Entity.LogEntity">
		INSERT INTO db_log(log_id,customer_id,user_id,module,text,user_time,start_time,end_time,type, show_index)
		VALUES
			(#{log.log_id},#{log.customer_id},#{log.user_id},#{log.module},#{log.text},
			 #{log.user_time},#{log.start_time},#{log.end_time},#{log.type}, #{log.show_index})
	</insert>
	


	<!-- 我的下属 -->
	<insert id="callUnderling" statementType="CALLABLE">
		CALL pro_fetch_underling (#{p_customer_id, mode=IN, jdbcType=VARCHAR}, #{p_user_id, mode=IN, jdbcType=VARCHAR})
	</insert>





	<!-- 总人数 -->
	<insert id="callHistoryEmpCount" statementType="CALLABLE">
		CALL pro_fetch_history_emp_count (
			#{p_customer_id, mode=IN, jdbcType=VARCHAR},
			#{p_user_id, mode=IN, jdbcType=VARCHAR},
			#{p_cur_date, mode=IN, jdbcType=TIMESTAMP}
			)
	</insert>
	
	
	<select id="queryVDimEmp" resultMap="rsMap">
		SELECT
			t1.organization_id,
			t1.organization_key,
			t1.full_path,
			t.emp_key,
			t.passtime_or_fulltime,
			t.run_off_date
		FROM
			dim_organization t1
		LEFT JOIN v_dim_emp t ON t.organization_id = t1.organization_id AND t1.customer_id = t.customer_id
		WHERE t1.customer_id = #{customer_id}
<!-- 		  AND t.run_off_date is null -->
	</select>
	
	<select id="deleteHistoryEmpCountByDay"> DELETE FROM `history_emp_count` where `day` = #{day} </select>
	<insert id="replaceHistoryEmpCountByDay" parameterType="java.util.List">
		<if test="list != null and list.size() > 0 ">
			INSERT INTO history_emp_count (
				history_emp_count_id,
				customer_id,
				organization_id,
				full_path,
				type,
				emp_count,
				emp_count_sum,
				day,
				note,
				year
			)VALUES
			<foreach collection="list" item="i" index="index" open="" close="" separator=",">
				(
				#{i.history_emp_count_id}, #{i.customer_id},
				#{i.organization_id},
				#{i.full_path},
				#{i.type},
				#{i.emp_count},
				#{i.emp_count_sum},
				#{i.day},
				#{i.note},
				YEAR(#{i.day})
				)
			</foreach>
		</if>
	</insert>
	
	<select id="deleteHistoryEmpCountMonthByDay"> DELETE FROM `history_emp_count_month` where customer_id = #{customer_id} AND `YEAR_MONTH` = #{year_month}</select>
	<insert id="replaceHistoryEmpCountMonthByFirst" >
		INSERT INTO history_emp_count_month (
			history_emp_count_month_id,
			customer_id,
			organization_id,
			organization_full_path,
			month_begin,
			month_begin_sum,
			`year_month`,
			type,
			refresh
		) 
		SELECT
			REPLACE (UUID(), '-', ''),
			#{customer_id}, 
			t1.organization_id,
			t1.full_path,
			t1.emp_count,
			t1.emp_count_sum,
			#{year_month},
			t1.type,
			#{dbNow}
		FROM
			 history_emp_count t1 
		WHERE t1.`day` = #{dbNow} AND t1.type = 1
	</insert>
	<insert id="replaceHistoryEmpCountMonthByToday">
		INSERT INTO history_emp_count_month (
			history_emp_count_month_id,
			month_end,
			month_end_sum,
			month_count,
			month_count_sum,
			refresh
		) 	
		SELECT 
			t4.history_emp_count_month_id,
			t5.emp_count as month_end, 
			t5.emp_count_sum as month_end_sum, 
			0 as month_count,
			0 as month_count_sum,
			now()
		FROM history_emp_count_month t4 
		LEFT JOIN history_emp_count t5 on t5.customer_id = t4.customer_id 
			and t5.organization_id = t4.organization_id
			and t5.type = 1 
		WHERE t4.`year_month` = #{year_month}
			and t4.customer_id= #{customer_id}
			and t4.type = 1 
			and t5.`day` = #{dbNow}
		ON Duplicate KEY UPDATE 
			month_end = t5.emp_count,
			month_end_sum = t5.emp_count_sum,
			month_count = IFNULL((t4.month_begin + t5.emp_count) / 2.0, 0),
			month_count_sum = IFNULL((t4.month_begin_sum + t5.emp_count_sum) / 2.0, 0),
			refresh =now()
	</insert>
	<insert id="replaceHistoryEmpCountMonthByLast">
		INSERT INTO history_emp_count_month (
			history_emp_count_month_id,
			month_avg,
			month_avg_sum,
			refresh
		) 
		SELECT t4.history_emp_count_month_id, tt.month_avg, tt.month_avg_sum , now()
		FROM (
			SELECT 
				avg(t5.emp_count) as month_avg,
				avg(t5.emp_count_sum) as month_avg_sum,
				t5.organization_id
			FROM history_emp_count t5 
			WHERE 
				LOCATE(#{yyyy_MM}, t5.`day`) 
				AND t5.type = 1 
			GROUP BY t5.organization_id
		) tt 
		INNER JOIN history_emp_count_month t4 on t4.organization_id = tt.organization_id 
			AND t4.`year_month` = #{year_month}
			and t4.customer_id= #{customer_id}
			AND t4.type = 1
		ON Duplicate KEY UPDATE 
			month_avg = tt.month_avg,
			month_avg_sum = tt.month_avg_sum,
			refresh =now()
	</insert>
	
	
	
	
	<insert id="insertKeyTalent" parameterType="java.util.List">
		<if test="list != null and list.size() > 0 ">
			INSERT INTO key_talent (
				key_talent_id,
				customer_id,
				key_talent_type_id,
				is_sychron,
				is_delete,
				emp_id,
				note,
				create_emp_id,
				create_time,
				refresh,
				refresh_tag1,refresh_tag2,refresh_log,refresh_encourage
			)VALUES
			<foreach collection="list" item="dto" index="index" open="" close="" separator=",">
				(
				#{dto.keyTalentId},
			    #{dto.customerId},
			    #{dto.keyTalentTypeId},
			     #{dto.sychron},
			     #{dto.delete},
			     #{dto.empId},
			    '',
			    #{dto.createEmpId},
			    now(),
			    #{dto.refresh}, null, null, null, null
				)
			</foreach>
		</if>
	</insert>
<!-- 	<delete id="deleteKeyTalent"> -->
<!-- 		delete from key_talent where emp_id in -->
<!-- 			<foreach collection="list" item="i" index="index" open="(" close=")" separator=","> -->
<!-- 			#{i} -->
<!-- 		</foreach> -->
<!-- 		and customer_id = #{customer_id} -->
<!-- 	</delete> -->
     <update id="deleteKeyTalent" >
     UPDATE key_talent SET is_delete = 1 WHERE emp_id in
	     <foreach collection="list" item="i" index="index" open="(" close=")" separator=",">
	     	 #{i} 
	     </foreach>
     AND customer_id = #{customer_id}
    </update>
	
	
	<!-- 员工每天加班情况 -->
	<insert id="callEmpOvertimeDay" statementType="CALLABLE">
		CALL pro_fetch_emp_overtime_day (
			#{p_customer_id, mode=IN, jdbcType=VARCHAR},
			#{p_user_id, mode=IN, jdbcType=VARCHAR},
			#{now, mode=IN, jdbcType=VARCHAR})
	</insert>
	
	
	
	
	
	<!-- 插入历史员工日切片数据 -->
	<!-- ============================================================================================================ -->
	<select id="queryVDimEmp2" resultMap="rsMap">
		SELECT
			v_dim_emp_id,customer_id,emp_id,emp_key,user_name,user_name_ch,emp_hf_id,emp_hf_key,
			report_relation,email,img_path,passtime_or_fulltime,contract,blood,age,company_age,
			is_key_talent,sex,nation,degree_id,degree,native_place,country,birth_place,birth_date,national_id,
			national_type,marry_status,patty_name,position_id,position_name,organization_parent_id,organization_parent_name,
			organization_id,organization_name,sequence_id,sequence_name,sequence_sub_id,sequence_sub_name,performance_id,performance_name,
			ability_id,job_title_id,ability_lv_id,ability_name,job_title_name,ability_lv_name,rank_name,
			run_off_date,entry_date,tel_phone,qq,wx_code,address,contract_unit,work_place_id,work_place,regular_date,apply_type,channel_id,
			speciality,is_regular,refresh_date,c_id
		FROM
			 v_dim_emp 
		WHERE customer_id = #{customer_id}
	</select>
	<insert id="addDimEmpDays"  parameterType="java.util.List">
		<if test="list != null and list.size() > 0 ">
		INSERT INTO dim_emp(
			dim_emp_id,customer_id,emp_id,emp_key,user_name,user_name_ch,emp_hf_id,emp_hf_key,
			report_relation,email,img_path,passtime_or_fulltime,contract,blood,age,company_age,
			is_key_talent,sex,nation,degree_id,degree,native_place,country,birth_place,birth_date,national_id,
			national_type,marry_status,patty_name,position_id,position_name,organization_parent_id,organization_parent_name,
			organization_id,organization_name,sequence_id,sequence_name,sequence_sub_id,sequence_sub_name,performance_id,performance_name,
			ability_id,job_title_id,ability_lv_id,ability_name,job_title_name,ability_lv_name,rank_name,
			run_off_date,entry_date,tel_phone,qq,wx_code,address,contract_unit,work_place_id,work_place,regular_date,apply_type,channel_id,
			speciality,is_regular,refresh_date,c_id, days, year
		)VALUES
		<foreach collection="list" item="i" index="index" open="" close="" separator=",">
			(
			replace(uuid(), '-', ''), #{i.customer_id},#{i.emp_id},#{i.emp_key},#{i.user_name},#{i.user_name_ch},#{i.emp_hf_id},#{i.emp_hf_key},
			#{i.report_relation},#{i.email},#{i.img_path},#{i.passtime_or_fulltime},#{i.contract},#{i.blood},#{i.age},#{i.company_age},
			#{i.is_key_talent},#{i.sex},#{i.nation},#{i.degree_id},#{i.degree},#{i.native_place},#{i.country},#{i.birth_place},#{i.birth_date},#{i.national_id},
			#{i.national_type},#{i.marry_status},#{i.patty_name},#{i.position_id},#{i.position_name},#{i.organization_parent_id},#{i.organization_parent_name},
			#{i.organization_id},#{i.organization_name},#{i.sequence_id},#{i.sequence_name},#{i.sequence_sub_id},#{i.sequence_sub_name},#{i.performance_id},#{i.performance_name},
			#{i.ability_id},#{i.job_title_id},#{i.ability_lv_id},#{i.ability_name},#{i.job_title_name},#{i.ability_lv_name},#{i.rank_name},
			#{i.run_off_date},#{i.entry_date},#{i.tel_phone},#{i.qq},#{i.wx_code},#{i.address},#{i.contract_unit},#{i.work_place_id},#{i.work_place},#{i.regular_date},#{i.apply_type},#{i.channel_id},
			#{i.speciality},#{i.is_regular},now(),#{i.c_id},
			#{day}, year(#{day}) <!-- no is list obj -->
			)
		</foreach>
		</if>
	</insert>
	<!-- ============================================================================================================ -->
	
	
</mapper>